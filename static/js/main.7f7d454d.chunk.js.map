{"version":3,"sources":["components/Table.js","components/Form.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Table","geojson","className","features","length","filter","properties","score","Form","upload","useState","uploadFile","setUploadFile","onSubmit","event","preventDefault","reader","FileReader","readAsText","onload","result","JSON","parse","type","accept","multiple","onChange","e","target","files","style","margin","label","filename","tagName","exportFile","stringify","Map","mapContainer","useRef","map","drawnMarkers","setDrawnMarkers","colors","setGeojson","addMarker","newMaker","Date","now","lngLat","lng","lat","prevState","deleteMarker","id","newFeatures","item","changeScore","select","feature","value","markerColor","onDragEnd","marker","geometry","coordinates","getLngLat","rewriteMarkers","forEach","m","remove","popup","mapboxgl","Popup","offset","setHTML","Marker","color","draggable","setLngLat","setPopup","addTo","current","on","getElement","addEventListener","togglePopup","isOpen","children","stopPropagation","drawMarkers","useEffect","accessToken","container","center","zoom","addSource","data","ref","file","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f7d454d.chunk.js","sourcesContent":["const Table = ({ geojson }) => {\r\n  return (\r\n    <ul className=\"table\">\r\n      <li>Total: {geojson.features.length}</li>\r\n      <li>Five: {geojson.features.filter(features => features.properties.score === 5).length}</li>\r\n      <li>Four: {geojson.features.filter(features => features.properties.score === 4).length}</li>\r\n      <li>Three:{geojson.features.filter(features => features.properties.score === 3).length}</li>\r\n      <li>Two: {geojson.features.filter(features => features.properties.score === 2).length}</li>\r\n      <li>One: {geojson.features.filter(features => features.properties.score === 1).length}</li>\r\n      <li>Zero: {geojson.features.filter(features => features.properties.score === 0).length}</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Table;","import { useState } from 'react';\r\nimport DownloadLink from \"react-download-link\";\r\n\r\nfunction Form({ geojson, upload }) {\r\n  const [uploadFile, setUploadFile] = useState(null);\r\n\r\n  const submitForm = (event) => {\r\n    event.preventDefault();\r\n    const reader = new FileReader();\r\n    if (uploadFile) {\r\n      reader.readAsText(uploadFile);\r\n\r\n      reader.onload = () => {\r\n        const result = JSON.parse(reader.result)\r\n        upload(result)\r\n      };\r\n    } else return\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={submitForm}>\r\n      <input type=\"file\" accept=\".json\" multiple={false} onChange={(e) => setUploadFile(e.target.files[0])} />\r\n      <input type=\"submit\" />\r\n      <DownloadLink\r\n        style={{ margin: \"0 10px\" }}\r\n        label=\"Export\"\r\n        filename=\"geojson.json\"\r\n        tagName=\"button\"\r\n        exportFile={() => JSON.stringify(geojson)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import mapboxgl from 'mapbox-gl';\r\nimport { useRef, useEffect, useState } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nconst Map = () => {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [drawnMarkers, setDrawnMarkers] = useState([])\r\n  const colors = {\r\n    0: \"black\",\r\n    1: \"gray\",\r\n    2: \"red\",\r\n    3: \"orange\",\r\n    4: \"lime\",\r\n    5: \"green\"\r\n  }\r\n  const [geojson, setGeojson] = useState({\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"markerColor\": \"grey\",\r\n          \"marker-size\": \"medium\",\r\n          \"marker-symbol\": \"\",\r\n          \"score\": 1,\r\n          \"id\": 123\r\n        },\r\n        \"geometry\": {\r\n          \"type\": \"Point\",\r\n          \"coordinates\": [\r\n            24.121856689453125,\r\n            49.93973135157948\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"markerColor\": \"red\",\r\n          \"marker-size\": \"medium\",\r\n          \"marker-symbol\": \"\",\r\n          \"score\": 2,\r\n          \"id\": 124\r\n        },\r\n        \"geometry\": {\r\n          \"type\": \"Point\",\r\n          \"coordinates\": [\r\n            24.224853515625,\r\n            49.7768301343366\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  });\r\n  const createMap = () => {\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoiNWhhbWVsZTU1IiwiYSI6ImNrdm0yeXN1dTB2aGcyeG91bjl0YzVsZTUifQ.2KMwF-DnCJaK8VOj9OcHkg';\r\n    if (map.current) return;\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: 'mapbox://styles/mapbox/streets-v11',\r\n      center: [24.039269, 49.848178],\r\n      zoom: 9\r\n    });\r\n    map.current.on('load', () => {\r\n      map.current.addSource('markers', {\r\n        type: 'geojson',\r\n        data: geojson\r\n      })\r\n      map.current.on('click', e => addMarker(e))\r\n    })\r\n  }\r\n  const drawMarkers = item => {\r\n    const popupTemplate = `\r\n    <select>\r\n      <option value=\"0\">0</option>\r\n      <option value=\"1\">1</option>\r\n      <option value=\"2\">2</option>\r\n      <option value=\"3\">3</option>\r\n      <option value=\"4\">4</option>\r\n      <option value=\"5\">5</option>\r\n    </select>\r\n    <button>Delete</button>\r\n`\r\n    const popup = new mapboxgl.Popup({\r\n      offset: 30\r\n    })\r\n      .setHTML(popupTemplate)\r\n    const marker = new mapboxgl.Marker({\r\n      color: item.properties.markerColor,\r\n      draggable: true\r\n    })\r\n      .setLngLat(item.geometry.coordinates)\r\n      .setPopup(popup)\r\n      .addTo(map.current)\r\n    marker.on('dragend', () => onDragEnd(item.properties.id, marker))\r\n    marker.getElement().addEventListener('click', e => {\r\n      marker.togglePopup()\r\n      if (popup.isOpen()) {\r\n        const delBtn = popup.getElement().children[1].children[1]\r\n        delBtn.addEventListener('click', () => deleteMarker(item.properties.id))\r\n\r\n        const select = popup.getElement().children[1].children[0]\r\n        select.value = item.properties.score\r\n        select.addEventListener('change', () => changeScore(select, item.properties.id))\r\n      }\r\n      e.stopPropagation()\r\n    })\r\n    setDrawnMarkers(prevState => [...prevState, marker])\r\n  }\r\n  const addMarker = e => {\r\n    const newMaker = {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"markerColor\": \"black\",\r\n        \"score\": 0,\r\n        \"id\": Date.now()\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [e.lngLat.lng, e.lngLat.lat]\r\n      }\r\n    }\r\n    setGeojson(prevState => {\r\n      return { ...prevState, features: [...prevState.features, newMaker] }\r\n    })\r\n  }\r\n  const deleteMarker = (id) => {\r\n    setGeojson(prevState => {\r\n      const newFeatures = prevState.features.filter(item => item.properties.id !== id)\r\n      return {\r\n        ...prevState, features: [...newFeatures]\r\n      }\r\n    })\r\n  }\r\n  const changeScore = (select, id) => {\r\n    setGeojson(prevState => {\r\n      return {\r\n        ...prevState, features: prevState.features.map(feature => {\r\n          if (feature.properties.id === id) {\r\n            feature.properties.score = +select.value\r\n            feature.properties.markerColor = colors[select.value]\r\n          }\r\n          return feature\r\n        })\r\n      }\r\n    })\r\n  }\r\n  const onDragEnd = (id, marker) => {\r\n    setGeojson(prevState => {\r\n      return {\r\n        ...prevState, features: prevState.features.map(feature => {\r\n          if (feature.properties.id === id) {\r\n            feature.geometry.coordinates = marker.getLngLat()\r\n          }\r\n          return feature\r\n        })\r\n      }\r\n    })\r\n  }\r\n  const upload = (file) => setGeojson(file)\r\n  const rewriteMarkers = () => {\r\n    setDrawnMarkers([])\r\n    drawnMarkers.forEach(m => m.remove())\r\n    geojson.features.map(item => drawMarkers(item))\r\n  }\r\n  useEffect(() => createMap())\r\n  useEffect(() => rewriteMarkers(), [geojson])\r\n  return (\r\n    <>\r\n      <div ref={mapContainer} className=\"map\"></div>\r\n      <Table geojson={geojson} />\r\n      <Form geojson={geojson} upload={upload} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;","import Map from \"./components/Map\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}